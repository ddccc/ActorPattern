File: c:/ddc/Java/Actor9/aaReadMe.txt
Date: Sun Mar 18 16:51:26 2018


			    Basic PDA functionality

Here how to compile and and execute this example in a Windows setting
=====================================================================

To compile the source -- assuming that it is in the directories:
    <your path here>\YourDirectory\Actor9\
    <your path here>\YourDirectory\fol\

execute in YourDirectory a script named Gent9 like:
  echo GENT: --- Compile the Actor PDA example -----------------
  set classpath0=%classpath%
  set classpath=%classpath%;<your path here>\YourDirectory\
  cd fol
  javac *.java
  cd ..\Actor9
  javac *.java
  cd ..
  set classpath=%classpath0%
  echo Finished

To execute the function Try in a shell: 
go to <your path here>\YourDirectory and execute:
  java actor9.Try
or alternatively pipe the output in a text file like:
  java actor9.Try > z.txt

You need to tinker with the script and with the names of your
directories in Unix. 
===================================================================

This directory contains Java source files for the PDA agent that
guesses what a next event generated by the World will be.  It 'learns'
by observing the sequence of events and postulates a relationship
between events at time N and at time N+1.


The paper's introduction mentioned:
      Andy Clark reminds us that humans are "... not passively awaiting
      sensory stimulation.  Instead, they are constantly active,
      trying to predict the streams of sensory stimulation before
      those arrive" [Clark].

Thinking while waiting for the next move of a chess opponent,
volunteering a term or phrase in a dialog, mulling over a past event,
etc. are examples.  Our pondering PDA shows a simple case of
prediction.  The World is here a source for a series of digits
(0,1,2,3,4,0,1,2,3,4,...). Each 0.4 second a next digit is delivered in
a state of the PDA. Without looking at that value first, the PDA tries
to predict its value. After making the prediction, right or wrong, it
checks its choice. The PDA learns by associating the correct digit
with the preceding one and storing the result in a 5*5 table.  After
processing 17 digits it reaches perfection.  The learning technique is
possibly a nano-version of neural networks.

The implementation uses a single state that triggers a single monitor
that generates and launches a single alert that generates a job for a
single dispatcher which when launched checks a condition that can
cause launching the single specific job. That job makes a prediction
based on the preceding digit and a best guess according to what is
stored in the 5*5 table. It checks and reports the accuracy of its
guess.  The table gets subsequently updated by using the correct
number.
